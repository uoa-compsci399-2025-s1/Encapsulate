name: CD Pipeline

on:
  push:
    # branches:
      # - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Manual deployment environment'
        type: environment
        required: true

jobs:
  deploy-to-staging:
    name: Deploy Encapsulate to Staging
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    env:
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      # Repository secrets
      DATABASE_URI: ${{ secrets.DATABASE_URI }}
      PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
    environment:
      name: staging
      # url:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # https://stackoverflow.com/questions/60477061/github-actions-how-to-deploy-to-remote-server-using-ssh
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{secrets.EC2_SSH_KEY}}" > ../private.key
          sudo chmod 600 ../private.key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Build next app
        run: pnpm build

      - name: Upload repo to EC2
        run: |
          rsync -az --delete -e "ssh -i ../private.key" \
            --exclude '.git' \
            ./ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app

      # - name: Connect to Server via SSH
      #   run: |
      #     echo "Connecting via SSH..."

      #     ssh -i ../private.key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} <<'EOT'
      #     cd ~/app
      #     echo "storing secrets"
      #     echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> .env
      #     echo "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}" >> .env

      #     echo "install docker and docker-compose"
      #     sudo apt-get update
      #     sudo apt-get install -y docker.io docker-compose
      #     sudo usermod -aG docker $USER
      #     newgrp docker

      #     echo "Stopping old containers"
      #     docker-compose down

      #     echo "Rebuilding and starting containers"
      #     docker-compose up -d --build
      #     EOT
