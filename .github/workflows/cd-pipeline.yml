name: CD Pipeline

on:
  push:
    # branches:
      # - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Manual deployment environment'
        type: environment
        required: true

jobs:
  deploy-to-staging:
    name: Deploy Encapsulate to Staging
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    env:
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      # Repository secrets
      DATABASE_URI: ${{ secrets.DATABASE_URI }}
      PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
    environment:
      name: staging
      url: http://[2406:da1c:5cf:900:ae61:fd30:b24c:451a:3000]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # https://stackoverflow.com/questions/60477061/github-actions-how-to-deploy-to-remote-server-using-ssh
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{secrets.EC2_SSH_KEY}}" > ../private.key
          sudo chmod 600 ../private.key
          echo "${{secrets.EC2_HOST}}" > ~/.ssh/known_hosts
        shell: bash

      - name: Connect to Server via SSH
        run: |
          echo "Connecting via SSH..."

          ssh -i ../private.key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} <<'EOT'
          echo "storing secrets"
          echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> ~/.env
          echo "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}" >> ~/.env

          echo "install docker"
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo usermod -aG docker $USER
          newgrp docker

          echo "Stopping old containers"
          docker compose down

          echo "Rebuilding and starting containers"
          docker compose up -d --buil
          EOT
